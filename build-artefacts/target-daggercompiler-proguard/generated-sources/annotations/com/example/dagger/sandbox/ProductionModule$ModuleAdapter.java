// Code generated by dagger-compiler.  Do not edit.
package com.example.dagger.sandbox;


import dagger.internal.Binding;
import dagger.internal.ModuleAdapter;
import java.util.Map;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class ProductionModule$ModuleAdapter extends ModuleAdapter<ProductionModule> {
  private static final String[] ENTRY_POINTS = { "members/com.example.dagger.sandbox.SampleApplication", "members/com.example.dagger.sandbox.SampleActivity", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { com.example.dagger.sandbox.AndroidServicesModule.class, };

  public ProductionModule$ModuleAdapter() {
    super(ENTRY_POINTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(Map<String, Binding<?>> map) {
    map.put("android.content.Context", new ProvideContextProvidesAdapter(module));
  }

  /**
   * A {@code Binder<android.content.Context>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<android.content.Context>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideContextProvidesAdapter extends Binding<android.content.Context>
      implements Provider<android.content.Context> {
    private final ProductionModule module;

    public ProvideContextProvidesAdapter(ProductionModule module) {
      super("android.content.Context", null, IS_SINGLETON, com.example.dagger.sandbox.ProductionModule.class);
      this.module = module;
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.content.Context>}.
     */
    @Override
    public android.content.Context get() {
      return module.provideContext();
    }
  }
}
